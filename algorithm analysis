#include<stdio.h>
int max_of_three(int a, int b, int c) {
	int max_value;

	// 比较并直接赋值
	if (a >= b && a >= c) {
		max_value = a;
	}
	else if (b >= a && b >= c) {
		max_value = b;
	}
	else {
		max_value = c; // 当c是最大的时候
	}

	return max_value;
}
static int maxsubsum(const int A[], int left, int right)
{
	int max_of_three(int a, int b, int c);
	int Max_leftsum, Max_rightsum;
	int Max_leftbordersum, Max_rightbordersum;
	int leftbordersum, rightbordersum;
	int center, i;

	if (left == right)
	{
		if (A[left] > 0)
			return A[left];
		else
			return 0;
	}
	center = (left + right) / 2;
	Max_leftsum = maxsubsum(A, left, center);
	Max_rightsum = maxsubsum(A, center + 1, right);
	Max_leftbordersum = 0; leftbordersum = 0;
	for (i = center; i >= left; i--)
	{
		leftbordersum += A[i];
		if (leftbordersum > Max_leftbordersum)
		{
			Max_leftbordersum = leftbordersum;
		}
	}
	Max_rightbordersum = 0; rightbordersum = 0;
	for (i = center + 1; i <= right; i++)
	{
		rightbordersum += A[i];
		if (rightbordersum > Max_rightbordersum)
		{
			Max_rightbordersum = rightbordersum;
		}

	}
	return max_of_three(Max_leftsum, Max_rightsum, Max_leftbordersum + Max_rightbordersum);
}

int maxsubsequence(const int A[], int n)
{
	return maxsubsum(A, 0, n - 1);
}

int main()
{
	const int A[] = { 4, -3, 5, -2, -1, 2, 6, -2 };
	int n = sizeof(A) / sizeof(A[0]);

	// 调用 maxsubsequence 函数并存储结果
	int max_sum = maxsubsequence(A, n);

	printf("The maximum subsequence sum is: %d\n", max_sum);

	return 0;
}

/*maxsubsum(A, left, center) 计算的是数组 A 从下标 left 到下标 center 的最大子序列和，即左边部分的最大子序列和。

同理，maxsubsum(A, center + 1, right) 计算的是从下标 center + 1 到下标 right 的最大子序列和，即右边部分的最大子序列和。

Max_leftbordersum 是通过循环计算得到的，它代表了从分割点（中心点）center 向左遍历，直到下标 left 为止的连续递增元素之和的最大值。这可以用于找到可能跨越分割点的最大子序列。

Max_rightbordersum 类似地，是从分割点（中心点）center + 1 向右遍历到下标 right 为止的连续递增元素之和的最大值*/


int maxsubsequence(const int A[], int n)
{
	int thissum, maxsum, j;
	thissum = maxsum = A[0];
	for (j = 0; j < n; j++)
	{
		thissum += A[j];
		if (thissum > maxsum)
		{
			maxsum = thissum;
		}
		else if (thissum<0)
		{
			thissum = 0;
		}
	}
	return maxsum;
}
int main()
{

	const int A[] = { -7,-8,-9 - 10 };
	int n = sizeof(A) / sizeof(int);
	int a = maxsubsequence(A,n);
	printf("%d\n", a);
	return 0;
}



9
#include<stdio.h>
#define _CRT_SECURE_NO_WARNINGS 1
long int Pow(long int x, unsigned int n)
{
	if (n == 0)
	{
		return 1;
	}
	if (n == 1)
	{
		return x;
	}
	if (n % 2 == 0 && n != 0)
	{
		return Pow(x * x, n / 2);
	}
	else
		return Pow(x * x, n / 2) * x;
}
int main()
{
	long int x;
	printf("输入一个数:");
	scanf("%d", &x);
	int n = 6;
	int a = Pow(x, n);
	printf("%d\n", a);
	return 0;
}

